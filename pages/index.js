import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { FreeSoloCreateOption } from "../components/SearchInput";
import Album from "../components/Album";
import { CircularProgress } from "@mui/material";
import paginate from "../lib/paginate";
import { useAppContext } from "../context";
import axios from "axios";
import { useEffect, useState } from "react";
import { marked } from "marked";

const numAlbumsPage = 6;
let numPages;
export default function Home() {
  const { globalState, setGlobalState } = useAppContext();
  const [albums, setAlbums] = useState([]);
  const [artistInfo, setArtistInfo] = useState([]);
  const [moreInfo, setMoreInfo] = useState(false);
  const [loading, setLoading] = useState(true);
  const artist = globalState;
  const [page, setPage] = useState(0);
  const [data, setData] = useState([]);

  const getData = async (artist) => {
    try {
      const data = await axios.get(`/api/albums?artist=${artist}`);
      const fetchedData = data.data.msg.topalbums.album;
      numPages = Math.floor(fetchedData.length / numAlbumsPage);
      const paginateData = paginate(fetchedData, numAlbumsPage);
      setData(paginateData);
      setAlbums(paginateData[page]);
    } catch (error) {}

    try {
      const data = await axios.get(`/api/artist?artist=${artist}`);
      setArtistInfo(data.data.msg.artist);
    } catch (error) {}
    setLoading(false);
  };

  useEffect(() => {
    setAlbums(data[page]);
  }, [page]);

  const nextPage = () => {
    setPage((oldPage) => {
      return oldPage === numPages ? 0 : oldPage + 1;
    });
  };

  const previousPage = () => {
    setPage((oldPage) => {
      return oldPage === 0 ? numPages : oldPage - 1;
    });
  };

  const handlePage = (newpage) => {
    setPage(newpage);
  };

  useEffect(() => {
    getData(globalState);
    numPages = Math.floor(data.length / numAlbumsPage);
  }, []);
  const fillpreview = (content) => {
    let rawMarkup = marked.parse(content);
    marked.setOptions({ breaks: true });
    return { __html: rawMarkup };
  };
  let bioContent = "";

  if (artistInfo && artistInfo.bio) {
    bioContent =
      artistInfo.bio.content.length < 200 || moreInfo
        ? artistInfo.bio.content
        : artistInfo.bio.content.slice(0, 200) + "...";
  }

  const handleChange = (e) => {
    const artist = e.target.innerText;
    setGlobalState(artist);
    setLoading(true);
    setMoreInfo(false);
    setArtistInfo([]);
    setAlbums([]);
    setData([]);
    setPage(0);

    getData(artist);
  };
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div className={styles.appTitleDiv} style={{ marginBottom: "10px" }}>
          <h1 className={styles.appTitle}>Music Albums</h1>
          <a
            href="https://www.last.fm"
            target="_blank"
            rel="noreferrer"
            title="Powered by"
          >
            <img
              style={{ width: "70px" }}
              src="last_fm.png"
              alt="last fm logo"
            />
          </a>
        </div>

        {loading ? (
          <div style={{ marginBottom: "20px" }}>
            <CircularProgress />
          </div>
        ) : (
          <>
            <h5 className={styles.title}>
              {artistInfo && artistInfo.name
                ? artistInfo.name
                : " Select an artist"}
            </h5>
            {artistInfo && artistInfo.bio && (
              <div className={styles.preview}>
                <div dangerouslySetInnerHTML={fillpreview(bioContent)} />
                <a
                  className={styles.lessMore}
                  style={{ fontWeight: "600" }}
                  onClick={() => setMoreInfo(!moreInfo)}
                >
                  {!moreInfo ? "show more" : "show less"}
                </a>
              </div>
            )}
          </>
        )}
        <FreeSoloCreateOption handleChange={handleChange} disabled={loading} />

        {loading ? (
          <div style={{ marginTop: "10px" }}>
            <CircularProgress />
          </div>
        ) : (
          <>
            {" "}
            <div className="pagePanel">
              <button className="page-cmd" onClick={previousPage}>
                Previous
              </button>
              {data.map((item, index) => {
                return (
                  <button
                    key={index}
                    className={`page-btn ${
                      index === page ? "active-btn" : null
                    }`}
                    onClick={() => handlePage(index)}
                  >
                    {index + 1}
                  </button>
                );
              })}
              <button className="page-cmd" onClick={nextPage}>
                Next
              </button>
              <p className="progress">
                {data
                  .slice(0, page + 1)
                  .reduce((prev, curr) => prev + curr.length, 0)}
                /{data.reduce((prev, curr) => prev + curr.length, 0)}
              </p>
            </div>
            <div className={styles.albums}>
              {albums.map((a) => (
                <Album
                  key={a.name}
                  name={a.name}
                  img={a.image[3]["#text"] ? a.image[3]["#text"] : "/blank.png"}
                  mbid={a.mbid}
                  url={a.url}
                />
              ))}
            </div>
          </>
        )}
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
}
